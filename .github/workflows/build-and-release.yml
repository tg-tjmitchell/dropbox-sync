name: Build and Release

permissions:
  contents: write
  packages: write
  actions: read

on:
  push:
    branches: [ main, master ]
    # trigger builds on version tags (assumes tags like 'v1.2.3')
    tags: [ 'v*' ]
  workflow_dispatch: {}
  release:
    types: [ published ]

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            goos: linux
            goarch: amd64
          - name: windows-amd64
            runner: windows-latest
            goos: windows
            goarch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Build (Linux)
        if: matrix.goos == 'linux'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p build
          OUTPUT=build/dropbox-sync-${{ matrix.goos }}-${{ matrix.goarch }}
          echo "building $OUTPUT"
          go build -o "$OUTPUT"
        shell: bash

      - name: Build (Windows)
        if: matrix.goos == 'windows'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          New-Item -ItemType Directory -Force -Path build | Out-Null
          $output = "build\\dropbox-sync-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          Write-Host "building $output"
          # Build binary
          go build -o $output
          # Keep only the built .exe in build/ (no zip archive created)
        shell: pwsh

      - name: Upload build artifact (linux)
        if: matrix.goos == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: build/dropbox-sync-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Upload build artifact (windows)
        if: matrix.goos == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: build/dropbox-sync-${{ matrix.goos }}-${{ matrix.goarch }}.exe

      - name: Upload release asset (linux)
        if: github.event_name == 'release' && matrix.goos == 'linux'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/dropbox-sync-linux-amd64
          asset_name: dropbox-sync-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload release asset (windows)
        if: github.event_name == 'release' && matrix.goos == 'windows'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/dropbox-sync-windows-amd64.exe
          asset_name: dropbox-sync-windows-amd64.exe
          asset_content_type: application/octet-stream

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-amd64
          path: build

      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-amd64
          path: build

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          # upload the built binaries from the build folder plus example json
          files: |
            build/dropbox-sync-linux-amd64
            build/dropbox-sync-windows-amd64.exe
            dropbox-sync.example.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
